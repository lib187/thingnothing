1. 参数的处理，main函数可变参数，标准的main

int main(int argc, char args[])

2. 日志，定位日志所在代码行号
  #和##在宏定义中的用法： https://www.cnblogs.com/alantu2018/p/8465911.html

  ---C语言中的日志，其他语言的实现其实都可以参考---
  C语言预编译中的#和##的作用https://blog.csdn.net/qq_37858386/article/details/78919163
  
  这里以日志函数为例:
    #define log(fmt, args...) do { Log("[%s:%s():%d] " fmt, __FILE__,  __func__, __LINE__, ##args); }while(0)

    void Log(const char *pcFmt, ...)
    {
      // e.g. log("ABC");
      // 宏替换后Deploy_Log("[%s:%s():%d] " "ABC", __FILE__,  __func__, __LINE__, ##args)
      // 即 Deploy_Log("[%s:%s():%d] ABC", __FILE__,  __func__, __LINE__, ##args)
      // 此时pcFmt == "[%s:%s():%d] ABC"

      va_list pcArgs;
      // 	void va_start(va_list ap, last_arg) 这个宏初始化ap变量，它与va_arg和va_end 宏是一起使用的。last_arg 是最后一个传递给函数的已知的固定参数，即省略号之前的参数
      va_start(pcArgs, pcFmt);  // pcArgs == (__FILE__,  __func__, __LINE__, ##args) 

      // 此时acLogBuf = printf("[%s:%s():%d] ABC", __FILE__,  __func__, __LINE__)
      (void)vsnprintf(acLogBuf, DEPLOY_LOGMSG_MAX_LEN, pcFmt, pcArgs); 
      // void va_end(va_list ap)这个宏允许使用了 va_start 宏的带有可变参数的函数返回。如果在从函数返回之前没有调用 va_end，则结果为未定义。
      va_end(pcArgs); 
    }
    
   进一步的用法，如果我想封装一个Malloc, 函数中可以打印调用Malloc时的代码位置(类似log)，可以打印返malloc的返回值
   这里有一点需要将变参传递下去，这里可以参考https://my.oschina.net/u/1429862/blog/222903
      void Category::_logUnconditionally(Priority::Value priority, const char* format, va_list arguments) throw() 
      {
          _logUnconditionally2(priority, StringUtil::vform(format, arguments));
      }

      void Category::log(Priority::Value priority, const char* stringFormat, ...) throw() 
      { 
              if (isPriorityEnabled(priority)) 
              {
                  va_list va;
                  va_start(va, stringFormat);
                  _logUnconditionally(priority, stringFormat, va);
                  va_end(va);
              }
      }
    基于上面的log，封装一层malloc和free函数，可能方便的知道内存的申请和释放情况，防止内存泄漏
    void * MyMalloc(size_t size, ...)
    {
        void *ptr = malloc(size);

      char *pcFile = NULL;
      char *pcFunc = NULL;
      int iLine = 0;
      va_list sArgv;  
      va_start(sArgv, size);
      pcFile   = va_arg(sArgv, char*);
      pcFunc = va_arg(sArgv, char*);
      iLine = va_arg(sArgv, int);
      va_end(sArgv);

      log("[%s:%s():%d] malloc 0x%lx .\n", pcFile,  pcFunc, iLine, (long)ptr);        

        return ptr;
    }
    
3. # 函数堆栈跟递归调用、尾递归
    帧栈：https://zhuanlan.zhihu.com/p/37537046
    通过gdb调试时可以发现每次函数调用都要保护调用函数的堆栈，函数的局部变量都是在栈中存放。
    以最常见的阶乘为例子，实现很的简单，但是如果一个f(n), n>2^32/64 ，不考虑执行效率的问题，内存上肯定不够。
    之前在lua上见过有递归调用的说明，可以直接用。
    思考下如何实现的？
    首先可以判断，保护堆栈的方式肯定不能使用的。那么为什么要保护堆栈呢？肯定是子函数调用后还需要使用局部变量n，所以必须要用堆栈保护。
    人是如何计算阶乘的呢？是从小到大一点点累积上来的，为什么不用计算机的方式呢？超人的记忆力也不够啊。既然人靠体力运算可以慢慢计算出来，那么计算机没有到底做不了这种机械式的计算。
    如果计算程序也从小到大开始计算，那么我增加个参数用来保存f(1), f(2)...的结果也是可以实现的。但是还是要递归，堆栈还是会不断的保存，好像也没有解决根本问题啊，堆栈还在。
    如何删除堆栈？为什么不能删除堆栈？堆栈是用来保护数据的，现在数据被作为参数传递给子函数了，后续也用不到什么数据了，那么不就可以不用堆栈保护父函数了么。
    好像确实是可以不用再保护堆栈，那么子函数使用什么堆栈？直接使用调用函数的当前堆栈即可。

    引申到的相关术语 尾递归: https://www.cnblogs.com/wuyudong/p/rescuvie-tailrescuvie.html
    使用尾递归后，阶乘的表达
    int facotrial(int n,  int ret)
    {
      if (n == 1)
        // return 1;
        return ret; // ret就是最终的结果。
      return facotrial(n-1, n * ret); 
    }
    这里需要理解下，第二个参数是什么，以及递归时该参数怎么计算。递归函数，第二个参数为什么要是1.
    n和递归调用时的n-1都很好理解，那么ret和递归调用时的表达式为什么这么写。

    f(4, 1)                           f(1) = 1
    f(3, 4*1)                         f(2) = 1*2
    f(2, 4*3)                         f(3) = 3*2
    f(1, 2*12）                       f(4) = 4*6
    可以看出第二个参数是终止条件时的值，f(1)=1

    f(n) = x*f(n-1) + y   终止条件f(1)=3
    int fac(int n,  int ret)
    {
      if (n == 1)
        // return 1;
        return ret; // ret就是最终的结果。
      return fac(n-1, x * ret + y); // 表达式将f(n-1)这替换为参数2即可
    }
    // 使用时，参数的值为终止条件时的值。
    fac(4, 3)，可以继续封装一层或者用默认参数值
     
     
